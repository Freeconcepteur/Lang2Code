Description de Lang2Code
Introduction
Lang2Code est une application conçue pour transformer du langage humain en code Python. L'application s'appuie sur l'API d'OpenAI pour générer du code à partir de prompts en langage naturel et offre une interface utilisateur intuitive pour interagir avec la fonctionnalité de génération de code.
Technologies utilisées
- Python et SQLite : Utilisés pour le back-end de l'application et la gestion des données. - Streamlit : Utilisé pour créer et gérer le front-end de l'application. - OpenAI API : Utilisé pour transformer le langage naturel en code Python.
 1 - principe global :
l'utilisateur se connecte à l'application (il n'y aura pas de gestion des utilisateurs, pas de login, pas de mot de passe). il se retrouvera sur une interface qui possèdera une sidebar à gauche et une zone principale. Dans la sidebar, il retrouvera le titre de chacune de ses demandes passées. Dans la zone principale : - un textarea modifiable (nom : prompt-area) dans lequel il postera son prompt en langage humain (le textarea sera accompagné d'un bouton d'envoi 'send2api' vers openAI) - un textarea modifiable (nom : code-area) qui affichera le code renvoyé par l'API (ce textarea accompagné d'un bouton d'exécution) - une section (nom : result-window) qui affichera le résultat après avoir appuyé sur le bouton d'exécution. - un bouton de sauvegarde (nom : SaveBt) qui , au clic, enregistrera en base SQLite le contenu du prompt-area et le contenu du code-area
Scénarios utilisateur
2 - Scénarios utilisateur :
user-story 1 : l'utilisateur se connecte à l'application. Il écrit son prompt dans prompt-area. Il clique sur send2api pour l'envoyer à l'API d'openAI. La réponse de l'API est affichée dans code-area. L'utilisateur clique sur le bouton d'exécution et le résultat s'affiche dans result-window. => Le résultat est satisfaisant. L'utilisateur clique sur SaveBt pour sauvegarder son travail.
 user-story 2 : l'utilisateur se connecte à l'application. Il écrit son prompt dans prompt-area. Il clique sur send2api pour l'envoyer à l'API d'openAI. La réponse de l'API est affichée dans code-area. L'utilisateur clique sur le bouton d'exécution et le résultat s'affiche dans result-window. => Le résultat n'est pas satisfaisant. L'utilisateur modifie le code dans code-area. Il l'exécute à nouveau. Le nouveau résultat est satisfaisant. L'utilisateur clique sur SaveBt pour sauvegarder son travail.
 user-story 3 : l'utilisateur se connecte à l'application. Il écrit son prompt dans prompt-area. Il clique sur send2api pour l'envoyer à l'API d'openAI. La réponse de l'API est affichée dans code-area. L'utilisateur clique sur le bouton d'exécution et le résultat s'affiche dans result-window. => Le résultat n'est pas satisfaisant. L'utilisateur modifie le prompt dans prompt-area. Il clique sur send2api. Le nouveau code renvoyé par l'API s'affiche dans code-area. Il l'exécute. Le résultat dans result-window est satisfaisant. L'utilisateur clique sur SaveBt pour sauvegarder son travail.
user-story 4 : l'utilisateur se connecte à l'application. Il cherche un titre de prompt dans la sidebar. Il clique sur le prompt de son choix. Un appel à la base de données est passé et fait remonter le prompt choisi et le code correspondant dans les zones correspondantes prompt-area et code area.L'utilisateur clique sur le bouton d'exécution et le résultat s'affiche dans result-window. => Le résultat est satisfaisant. L'utilisateur clique sur SaveBt pour sauvegarder son travail.
user-story 5 : l'utilisateur se connecte à l'application. Il cherche un titre de prompt dans la sidebar. Il clique sur le prompt de son choix. Un appel à la base de données est passé et fait remonter le prompt choisi et le code correspondant dans les zones correspondantes prompt-area et code area.L'utilisateur clique sur le bouton d'exécution et le résultat s'affiche dans result-window. => Le résultat n'est pas satisfaisant. L'utilisateur modifie le code dans code-area. Il l'exécute à nouveau. Le nouveau résultat est satisfaisant. L'utilisateur clique sur SaveBt pour mettre à jour son travail.
Flux de travail
L'utilisateur interagit avec l'interface de l'application en soumettant des prompts en langage naturel. Ces prompts sont envoyés à l'API d'OpenAI, qui renvoie du code Python correspondant. L'utilisateur peut ensuite exécuter, modifier ou sauvegarder ce code. Les données sont stockées et gérées dans une base de données SQLite.
Base de données
user-story 6 : l'utilisateur se connecte à l'application. Il cherche un titre de prompt dans la sidebar. Il clique sur le prompt de son choix. Un appel à la base de données est passé et fait remonter le prompt choisi et le code correspondant dans les zones correspondantes prompt-area et code area.L'utilisateur clique sur le bouton d'exécution et le résultat s'affiche dans result-window. => Le résultat n'est pas satisfaisant. L'utilisateur modifie le prompt dans prompt-area. Il clique sur send2api. Le nouveau code renvoyé par l'API s'affiche dans code-area. Il l'exécute. Le résultat dans result-window est satisfaisant. L'utilisateur clique sur SaveBt. Comme le prompt a été modifié, ce sera enregistré comme un nouveau travail.
Problèmes potentiels et solutions
1. Problème avec la connexion à l'API d'OpenAI : Assurez-vous d'avoir une connexion Internet stable et que l'API fonctionne correctement. 2. Les résultats de l'API ne sont pas satisfaisants : Considérez la modification du prompt ou du code généré manuellement dans l'interface utilisateur. 3. Problèmes de performance : Assurez-vous que l'application est bien optimisée et n'est pas surchargée par des processus inutiles.
Utilisation Locale
Cette application est conçue pour être utilisée localement sur l'ordinateur de l'utilisateur. Elle n'est pas destinée à être déployée sur un serveur en ligne accessible publiquement. Pour utiliser l'application, l'utilisateur doit la configurer et l'exécuter sur son propre ordinateur.
Voici les étapes de base pour configurer et exécuter l'application localement : 1. Assurez-vous d'avoir les technologies requises installées (Python, SQLite, Streamlit, etc.). 2. Clonez ou téléchargez le code source de l'application sur votre ordinateur. 3. Naviguez vers le répertoire de l'application via la ligne de commande ou un terminal. 4. Exécutez l'application en utilisant la commande appropriée, généralement quelque chose comme 'streamlit run app.py'. 5. L'application devrait être accessible via un navigateur web à une adresse locale telle que 'localhost:8501'.